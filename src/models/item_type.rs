/*
 * Artifacts API
 *
 *  Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 
 *
 * The version of the OpenAPI document: 6.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ItemType {
    #[serde(rename = "utility")]
    Utility,
    #[serde(rename = "body_armor")]
    BodyArmor,
    #[serde(rename = "weapon")]
    Weapon,
    #[serde(rename = "resource")]
    Resource,
    #[serde(rename = "leg_armor")]
    LegArmor,
    #[serde(rename = "helmet")]
    Helmet,
    #[serde(rename = "boots")]
    Boots,
    #[serde(rename = "shield")]
    Shield,
    #[serde(rename = "amulet")]
    Amulet,
    #[serde(rename = "ring")]
    Ring,
    #[serde(rename = "artifact")]
    Artifact,
    #[serde(rename = "currency")]
    Currency,
    #[serde(rename = "consumable")]
    Consumable,
    #[serde(rename = "rune")]
    Rune,
    #[serde(rename = "bag")]
    Bag,

}

impl std::fmt::Display for ItemType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Utility => write!(f, "utility"),
            Self::BodyArmor => write!(f, "body_armor"),
            Self::Weapon => write!(f, "weapon"),
            Self::Resource => write!(f, "resource"),
            Self::LegArmor => write!(f, "leg_armor"),
            Self::Helmet => write!(f, "helmet"),
            Self::Boots => write!(f, "boots"),
            Self::Shield => write!(f, "shield"),
            Self::Amulet => write!(f, "amulet"),
            Self::Ring => write!(f, "ring"),
            Self::Artifact => write!(f, "artifact"),
            Self::Currency => write!(f, "currency"),
            Self::Consumable => write!(f, "consumable"),
            Self::Rune => write!(f, "rune"),
            Self::Bag => write!(f, "bag"),
        }
    }
}

impl Default for ItemType {
    fn default() -> ItemType {
        Self::Utility
    }
}

