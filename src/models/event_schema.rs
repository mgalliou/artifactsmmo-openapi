/*
 * Artifacts API
 *
 *  Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 
 *
 * The version of the OpenAPI document: 3.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventSchema {
    /// Name of the event.
    #[serde(rename = "name")]
    pub name: String,
    /// Code of the event. This is the event's unique identifier (ID).
    #[serde(rename = "code")]
    pub code: String,
    /// Map list of the event.
    #[serde(rename = "maps")]
    pub maps: Vec<models::EventMapSchema>,
    /// Map skin of the event.
    #[serde(rename = "skin")]
    pub skin: String,
    /// Duration in minutes.
    #[serde(rename = "duration")]
    pub duration: i32,
    /// Rate spawn of the event. (1/rate every minute)
    #[serde(rename = "rate")]
    pub rate: i32,
    /// Content of the event.
    #[serde(rename = "content")]
    pub content: Box<models::EventContentSchema>,
}

impl EventSchema {
    pub fn new(name: String, code: String, maps: Vec<models::EventMapSchema>, skin: String, duration: i32, rate: i32, content: models::EventContentSchema) -> EventSchema {
        EventSchema {
            name,
            code,
            maps,
            skin,
            duration,
            rate,
            content: Box::new(content),
        }
    }
}

